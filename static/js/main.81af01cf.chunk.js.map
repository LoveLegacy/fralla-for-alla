{"version":3,"sources":["assets/images/bread.svg","styles/Colors.ts","components/Input/Input.tsx","components/Button/Button.tsx","views/Home/Home.tsx","views/Admin/Admin.tsx","components/ShopListItem/ShopListItem.tsx","views/ShopList/ShopList.tsx","styles/normalize.ts","components/Header/Header.tsx","app/App.tsx","serviceWorker.js","index.js"],"names":["module","exports","Colors","black","white","cosmos","pink","rose","manhattan","taco","chenin","yellowGreen","mantis","chateauGreen","oceanGreen","calypso","Input","styled","input","Button","button","props","backgroundColor","textColor","InputRow","div","Home","type","defaultValue","to","Admin","Checkbox","isChecked","ItemWrapper","ToleranceItem","span","ShopListItem","name","amount","unit","tolerance","checked","onClick","map","t","ShopListResponse","ShopList","useState","checkedItems","setCheckedItems","handleClick","item","key","normalize","css","Header","Nav","nav","Logo","img","src","logo","GlobalStyle","createGlobalStyle","Boolean","window","location","hostname","match","ReactDOM","render","path","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.81af01cf.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/bread.c430fb3b.svg\";","const Colors = {\r\n  black: \"#000\",\r\n  white: \"#fff\",\r\n  cosmos: \"#FFDBDB\",\r\n  pink: \"#FDC7C3\",\r\n  rose: \"#FAB9AB\",\r\n  manhattan: \"#F5B595\",\r\n  taco: \"#EDBD82\",\r\n  chenin: \"#E4D371\",\r\n  yellowGreen: \"#BAD762\",\r\n  mantis: \"#74C755\",\r\n  chateauGreen: \"#4AB366\",\r\n  oceanGreen: \"#3F9E8C\",\r\n  calypso: \"#356C87\"\r\n};\r\n\r\nexport default Colors;\r\n","import styled from \"styled-components\";\r\nimport Colors from \"../../styles/Colors\";\r\n\r\nconst Input = styled.input`\r\n  background-color: ${Colors.white};\r\n  padding: 0.5rem;\r\n`;\r\n\r\nexport default Input;\r\n","import styled from \"styled-components\";\r\nimport Colors from \"../../styles/Colors\";\r\n\r\ninterface ButtonProps {\r\n  backgroundColor: string;\r\n  textColor: string;\r\n}\r\n\r\nconst Button = styled.button<ButtonProps>`\r\n  background-color: ${props => props.backgroundColor};\r\n  color: ${props => props.textColor};\r\n  padding: 0.5rem;\r\n`;\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport Input from \"../../components/Input/Input\";\r\nimport styled from \"styled-components\";\r\nimport Button from \"../../components/Button/Button\";\r\nimport Colors from \"../../styles/Colors\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst InputRow = styled.div`\r\n  margin-bottom: 0.5rem;\r\n`;\r\n\r\nconst Home = () => (\r\n  <>\r\n    <InputRow>\r\n      <span>People: </span>\r\n      <Input type=\"number\" defaultValue={20} />\r\n    </InputRow>\r\n    <InputRow>\r\n      <span>Vegetarians: </span>\r\n      <Input type=\"number\" defaultValue={20} />\r\n    </InputRow>\r\n    <InputRow>\r\n      <span>Vegan : </span>\r\n      <Input type=\"number\" defaultValue={20} />\r\n    </InputRow>\r\n    <InputRow>\r\n      <span>Gluten: </span>\r\n      <Input type=\"number\" defaultValue={20} />\r\n    </InputRow>\r\n    <InputRow>\r\n      <span>Lactose: </span>\r\n      <Input type=\"number\" defaultValue={20} />\r\n    </InputRow>\r\n\r\n    <Link to=\"/shoplist\">\r\n      <Button backgroundColor={Colors.chateauGreen} textColor={Colors.white}>\r\n        Continue\r\n      </Button>\r\n    </Link>\r\n  </>\r\n);\r\n\r\nexport default Home;\r\n","import React from \"react\";\r\n\r\nconst Admin = () => <div>Admin</div>;\r\n\r\nexport default Admin;\r\n","import React, { FC, useState } from \"react\";\r\nimport { ShopListItem as ShopListItemT } from \"../../views/ShopList/ShopList\";\r\nimport styled from \"styled-components\";\r\nimport Colors from \"../../styles/Colors\";\r\n\r\ninterface ShopListItemProps extends ShopListItemT {\r\n  onClick: (name: string) => void;\r\n}\r\n\r\ninterface CheckboxProps {\r\n  isChecked?: boolean;\r\n}\r\n\r\nconst Checkbox = styled.div<CheckboxProps>`\r\n  width: 3rem;\r\n  height: 3rem;\r\n  background-color: ${({ isChecked }) =>\r\n    isChecked ? Colors.yellowGreen : Colors.cosmos};\r\n  margin-right: 0.5rem;\r\n`;\r\n\r\nconst ItemWrapper = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 0.5rem;\r\n  border: 1px solid ${Colors.mantis};\r\n  cursor: pointer;\r\n`;\r\n\r\nconst ToleranceItem = styled.span`\r\n  margin-left: 0.25rem;\r\n  font-size: 0.75rem;\r\n`;\r\n\r\nconst ShopListItem: FC<ShopListItemProps> = ({\r\n  name,\r\n  amount,\r\n  unit,\r\n  tolerance,\r\n  checked,\r\n  onClick\r\n}) => {\r\n  const handleClick = () => {\r\n    onClick(name);\r\n  };\r\n  return (\r\n    <ItemWrapper onClick={handleClick}>\r\n      <Checkbox isChecked={checked} />\r\n      <span>\r\n        {amount} {unit} {name}\r\n      </span>\r\n      <span>\r\n        {\" \"}\r\n        {tolerance.map(t => (\r\n          <ToleranceItem>[{t}]</ToleranceItem>\r\n        ))}\r\n      </span>\r\n    </ItemWrapper>\r\n  );\r\n};\r\n\r\nexport default ShopListItem;\r\n","import React, { FC, useState } from \"react\";\r\nimport ShopListItem from \"../../components/ShopListItem/ShopListItem\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Button from \"../../components/Button/Button\";\r\nimport Colors from \"../../styles/Colors\";\r\n\r\nconst ShopListResponse: ShopListItem[] = [\r\n  {\r\n    name: \"Bread\",\r\n    amount: 1,\r\n    unit: \"piece\",\r\n    tolerance: [\"v\", \"vg\", \"l\"],\r\n    checked: true\r\n  },\r\n  {\r\n    name: \"Cheese\",\r\n    amount: 200,\r\n    unit: \"g\",\r\n    tolerance: [\"vg\", \"g\"]\r\n  },\r\n  {\r\n    name: \"Juice\",\r\n    amount: 5000,\r\n    unit: \"ml\",\r\n    tolerance: []\r\n  }\r\n];\r\n\r\nexport interface ShopListItem {\r\n  name: string;\r\n  amount: number;\r\n  unit: string;\r\n  tolerance: string[];\r\n  checked?: boolean;\r\n}\r\n\r\ninterface CheckedItems {\r\n  [key: string]: boolean;\r\n}\r\n\r\nconst ShopList: FC = () => {\r\n  const [checkedItems, setCheckedItems] = useState<CheckedItems>({});\r\n\r\n  const handleClick = (name: string) => {\r\n    // TODO: handle Checked items\r\n    setCheckedItems({ ...checkedItems, [name]: !checkedItems[name] });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {ShopListResponse.map((item: ShopListItem) => (\r\n        <ShopListItem\r\n          {...item}\r\n          key={item.name}\r\n          onClick={handleClick}\r\n          checked={checkedItems[item.name]}\r\n        ></ShopListItem>\r\n      ))}\r\n\r\n      <Link to=\"/shoplist\">\r\n        <Button backgroundColor={Colors.chateauGreen} textColor={Colors.white}>\r\n          Continue\r\n        </Button>\r\n      </Link>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ShopList;\r\n","import { css } from \"styled-components\";\r\n\r\nconst normalize = css`\r\n  html {\r\n    line-height: 1.15;\r\n    -webkit-text-size-adjust: 100%;\r\n  }\r\n  body {\r\n    margin: 0;\r\n  }\r\n  main {\r\n    display: block;\r\n  }\r\n  h1 {\r\n    font-size: 2em;\r\n    margin: 0.67em 0;\r\n  }\r\n  hr {\r\n    box-sizing: content-box;\r\n    height: 0;\r\n    overflow: visible;\r\n  }\r\n  pre {\r\n    font-family: monospace, monospace;\r\n    font-size: 1em;\r\n  }\r\n  a {\r\n    background-color: transparent;\r\n  }\r\n  abbr[title] {\r\n    border-bottom: none;\r\n    text-decoration: underline;\r\n    text-decoration: underline dotted;\r\n  }\r\n  b,\r\n  strong {\r\n    font-weight: bolder;\r\n  }\r\n  code,\r\n  kbd,\r\n  samp {\r\n    font-family: monospace, monospace;\r\n    font-size: 1em;\r\n  }\r\n  small {\r\n    font-size: 80%;\r\n  }\r\n  sub,\r\n  sup {\r\n    font-size: 75%;\r\n    line-height: 0;\r\n    position: relative;\r\n    vertical-align: baseline;\r\n  }\r\n  sub {\r\n    bottom: -0.25em;\r\n  }\r\n  sup {\r\n    top: -0.5em;\r\n  }\r\n  img {\r\n    border-style: none;\r\n  }\r\n  button,\r\n  input,\r\n  optgroup,\r\n  select,\r\n  textarea {\r\n    font-family: inherit;\r\n    font-size: 100%;\r\n    line-height: 1.15;\r\n    margin: 0;\r\n    color: inherit;\r\n    border: none;\r\n    background: none;\r\n  }\r\n  button,\r\n  input {\r\n    overflow: visible;\r\n    cursor: pointer;\r\n  }\r\n  button,\r\n  select {\r\n    text-transform: none;\r\n    cursor: pointer;\r\n  }\r\n\r\n  button::-moz-focus-inner,\r\n  [type=\"button\"]::-moz-focus-inner,\r\n  [type=\"reset\"]::-moz-focus-inner,\r\n  [type=\"submit\"]::-moz-focus-inner {\r\n    border-style: none;\r\n    padding: 0;\r\n  }\r\n  button:-moz-focusring,\r\n  [type=\"button\"]:-moz-focusring,\r\n  [type=\"reset\"]:-moz-focusring,\r\n  [type=\"submit\"]:-moz-focusring {\r\n    outline: 1px dotted ButtonText;\r\n  }\r\n  fieldset {\r\n    padding: 0.35em 0.75em 0.625em;\r\n  }\r\n  legend {\r\n    box-sizing: border-box;\r\n    color: inherit;\r\n    display: table;\r\n    max-width: 100%;\r\n    padding: 0;\r\n    white-space: normal;\r\n  }\r\n  progress {\r\n    vertical-align: baseline;\r\n  }\r\n  textarea {\r\n    overflow: auto;\r\n  }\r\n  [type=\"checkbox\"],\r\n  [type=\"radio\"] {\r\n    box-sizing: border-box;\r\n    padding: 0;\r\n  }\r\n  [type=\"number\"]::-webkit-inner-spin-button,\r\n  [type=\"number\"]::-webkit-outer-spin-button {\r\n    height: auto;\r\n  }\r\n  [type=\"search\"] {\r\n    -webkit-appearance: textfield;\r\n    outline-offset: -2px;\r\n  }\r\n  [type=\"search\"]::-webkit-search-decoration {\r\n    -webkit-appearance: none;\r\n  }\r\n  ::-webkit-file-upload-button {\r\n    -webkit-appearance: button;\r\n    font: inherit;\r\n  }\r\n  details {\r\n    display: block;\r\n  }\r\n  summary {\r\n    display: list-item;\r\n  }\r\n  template {\r\n    display: none;\r\n  }\r\n  [hidden] {\r\n    display: none;\r\n  }\r\n`;\r\n\r\nexport default normalize;\r\n","import styled from \"styled-components\";\r\nimport React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport logo from \"../../assets/images/bread.svg\";\r\n\r\nconst Header = () => {\r\n  const Nav = styled.nav`\r\n    display: flex;\r\n    position: sticky;\r\n    top: 0;\r\n    bottom: 0;\r\n    left: 0;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n  `;\r\n\r\n  const Logo = styled.img`\r\n    width: 3rem;\r\n  `;\r\n\r\n  return (\r\n    <Nav>\r\n      <Link to=\"/\">\r\n        <Logo src={logo} />\r\n      </Link>\r\n      <Link to=\"/admin\">Admin</Link>\r\n    </Nav>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Switch, Route, Link } from \"react-router-dom\";\n\nimport Home from \"../views/Home/Home\";\nimport Admin from \"../views/Admin/Admin\";\nimport Shopping from \"../views/ShopList/ShopList\";\nimport styled, { createGlobalStyle } from \"styled-components\";\nimport Colors from \"../styles/Colors\";\nimport normalize from \"../styles/normalize\";\nimport Header from \"../components/Header/Header\";\n\nconst GlobalStyle = createGlobalStyle`\n  body{\n    background-color: ${Colors.rose};\n    padding: 1rem;\n  }\n  ${normalize}\n\n`;\n\nexport default function App() {\n  return (\n    <Router>\n      <div>\n        <GlobalStyle />\n        <Header />\n\n        <Switch>\n          <Route path=\"/shoplist\">\n            <Shopping />\n          </Route>\n          <Route path=\"/admin\">\n            <Admin />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}